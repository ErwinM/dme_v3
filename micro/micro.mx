0, ldi s10(tgt), decode, imms[imm10], MDRS[imm], mdr_load, op0s[mdr], skipstate[1]
0, ldi s10(tgt), read,
0, ldi s10(tgt), exec, op0s[mdr], reg_load, regws[tgt]
1, br s13 offset, decode, imms[imm13], MDRS[imm], mdr_load, skipstate[1]
1, br s13 offset, read,
1, br s13 offset, exec, op0s[mdr], regr0S[PC], op1s[regr0], regws[PC], reg_load
2, fetch, decode, regr1s[pc], op0s[regr1], mar_load, incr_pc, ir_load
2, fetch, read,
2, fetch, exec,
3,
4, ldw s7(r5) tgt, decode, imms[imm7], MDRS[imm], mdr_load
4, ldw s7(r5) tgt, read, regr0s[REG5], op0s[mdr], op1s[regr0], mar_load
4, ldw s7(r5) tgt, exec, regr1s[reg0], op0s[mdr], regws[tgt2], mdrs[ram], mdr_load, reg_load
5, ldb tgt s7(r5), decode, imms[imm7], MDRS[imm], mdr_load
5, ldb tgt s7(r5), read, regr0s[REG5], op0s[mdr], op1s[regr0], mar_load
5, ldb tgt s7(r5), exec, regr1s[reg0], op0s[mdr], regws[tgt2], mdrs[ram], mdr_load, reg_load, be
6, stw src sw7(r5), decode, imms[imm7], mdr_load, mdrs[imm]
6, stw src sw7(r5), read, regr0s[REG5], op0s[mdr], op1s[regr0], mar_load
6, stw src sw7(r5), exec, mdrs[alu], regr0s[tgt2], regr1s[reg0], op0s[regr0], op1s[regr1], mdr_load, ram_load
7, stb sw7(r5) src, decode, imms[imm7], mdr_load, mdrs[imm]
7, stb sw7(r5) src, read, regr0s[REG5], op0s[mdr], op1s[regr0], mar_load
7, stb sw7(r5) src, exec, mdrs[alu], regr0s[tgt2], regr1s[reg0], op0s[regr0], op1s[regr1], mdr_load, ram_load, be
8, stw0 sw7(r5) r0, decode, imms[imm7], mdr_load, mdrs[imm]
8, stw0 sw7(r5) r0, read, regr0s[REG5], op0s[mdr], op1s[regr0], mar_load
8, stw0 sw7(r5) r0, exec, mdrs[alu], regr0s[reg0], regr1s[reg0], op0s[regr0], op1s[regr1], mdr_load, ram_load
9, stb0 sw7(r5) r0, decode, imms[imm7], mdr_load, mdrs[imm]
9, stb0 sw7(r5) r0, read, regr0s[REG5], op0s[mdr], op1s[regr0], mar_load
9, stb0 sw7(r5) r0, exec, mdrs[alu], regr0s[reg0], regr1s[reg0], op0s[regr0], op1s[regr1], mdr_load, ram_load, be
10, add op1 op2 res, decode, regr0s[arg0], regr1s[arg1], op0s[regr0], op1s[regr1], regws[tgt], reg_load, skipstate[2]
10, add op1 op2 res, read,
10, add op1 op2 res, exec,
11, sub op1 op2 res, decode, regr0s[arg0], regr1s[arg1], op0s[regr0], op1s[regr1], regws[tgt], reg_load, ALU[sub], skipstate[2]
11, sub op1 op2 res, read
11, sub op1 op2 res, exec
12, and tgt op1 op2, decode, regr0s[arg1], regr1s[arg0], op0s[regr0], op1s[regr1], regws[tgt], reg_load, ALU[and], skipstate[2]
12, and tgt op1 op2, read
12, and tgt op1 op2, exec
13, or op0 op1 tgt, decode, regr0s[arg1], regr1s[arg0], op0s[regr0], op1s[regr1], regws[tgt], reg_load, ALU[or], skipstate[2]
13, or op0 op1 tgt, read,
13, or op0 op1 tgt, exec,
14, skip.c r1 r2, decode, skipstate[1]
14, skip.c r1 r2, read,
14, skip.c r1 r2, exec, op0s[regr0], regr0s[arg0], regr1s[arg1], op1s[regr1], skipc[cond], ALU[sub]
15, addskp.z r1 r2 r3, decode, op0s[regr0], regr0s[arg0], regr1s[arg1], op1s[regr1], skipc[zr], ALU[sub], regws[tgt], reg_load, skipstate[2]
15, addskp.z r1 r2 r3, read,
15, addskp.z r1 r2 r3, exec,
16, addskp.nz r1 r2 r3, decode, op0s[regr0], regr0s[arg0], regr1s[arg1], op1s[regr1], skipc[nzr], ALU[sub], regws[tgt], reg_load, skipstate[2]
16, addskp.nz r1 r2 r3, read,
16, addskp.nz r1 r2 r3, exec,
17, addi IRimm r1 res, decode, imms[IMMIR], mdr_load, MDRS[imm], skipstate[1]
17, addi IRimm r1 res, read,
17, addi IRimm r1 res, exec, op1s[mdr], regr1s[arg1], op0s[regr1], ALU[add], regws[tgt], reg_load
18, addi IRimm r1 res, decode, imms[IMMIR], mdr_load, MDRS[imm], skipstate[1]
18, addi IRimm r1 res, read,
18, addi IRimm r1 res, exec, op1s[mdr], regr1s[arg1], op0s[regr1], ALU[sub], regws[tgt], reg_load
19, andi Irimm r1 tgt, decode, imms[IMMIR], mdr_load, MDRS[imm], skipstate[1]
19, andi Irimm r1 tgt, read,
19, andi Irimm r1 tgt, exec, op1s[mdr], regr0s[arg1], op0s[regr0], ALU[and], regws[tgt], reg_load
20, ori IRimm r1 tgt, decode, imms[IMMIR], mdr_load, MDRS[imm], skipstate[1]
20, ori IRimm r1 tgt, read,
20, ori IRimm r1 tgt, exec, op1s[mdr], regr0s[arg1], op0s[regr0], ALU[or], regws[tgt], reg_load
21,
22, addskpi.z imm op2 res, decode, imms[IMMIR], mdr_load, MDRS[imm], skipstate[1]
22, addskpi.z imm op2 res, read,
22, addskpi.z imm op2 res, exec, op0s[mdr], regr1s[arg1], op1s[regr1], skipc[zr], ALU[sub], regws[tgt], reg_load
23, addskpi.nz imm op2 res, decode, imms[IMMIR], mdr_load, MDRS[imm], skipstate[1]
23, addskpi.nz imm op2 res, read,
23, addskpi.nz imm op2 res, exec, op0s[mdr], regr1s[arg1], op1s[regr1], skipc[nzr], ALU[sub], regws[tgt], reg_load
24, ldw.b tgt (idx base), decode,
24, ldw.b tgt (idx base), read, regr0s[arg0], regr1s[arg1], op0s[regr0], op1s[regr1], mar_load
24, ldw.b tgt (idx base), exec, regr0s[reg0], op1s[regr0], op0s[mdr], regws[tgt], mdrs[ram], mdr_load, reg_load
25, ldb.b tgt idx(base), decode,
25, ldb.b tgt idx(base), read, regr0s[arg0], regr1s[arg1], op0s[regr0], op1s[regr1], mar_load
25, ldb.b tgt idx(base), exec, regr0s[reg0], op1s[regr0], op0s[mdr], regws[tgt], mdrs[ram], mdr_load, reg_load, be
26, stw.b src (idx base), decode,
26, stw.b src (idx base), read, regr0s[arg0], regr1s[arg1], op0s[regr0], op1s[regr1], mar_load
26, stw.b src (idx base), exec, mdrs[alu], regr0s[tgt], regr1s[reg0], op0s[regr0], op1s[regr1], mdr_load, ram_load
27, stb.b idx(base) src, decode,
27, stb.b idx(base) src, read, regr0s[arg0], regr1s[arg1], op0s[regr0], op1s[regr1], mar_load
27, stb.b idx(base) src, exec, mdrs[alu], regr0s[tgt], regr1s[reg0], op0s[regr0], op1s[regr1], mdr_load, ram_load, be
28, shl imm4 src tgt2, decode, imms[IMM4], mdr_load, MDRS[imm]
28, shl imm4 src tgt2, read,
28, shl imm4 src tgt2, exec, op1s[mdr], regr0s[arg2], op0s[regr0], ALU[shl], regws[tgt2], reg_load
29, shr imm4 src tgt2, decode, imms[IMM4], mdr_load, MDRS[imm]
29, shr imm4 src tgt2, read,
29, shr imm4 src tgt2, exec, op1s[mdr], regr0s[arg2], op0s[regr0], ALU[shr], regws[tgt2], reg_load
30, addhi imm7 reg, decode, imms[imm7u], mdrs[imm], mdr_load, skipstate[1]
30, addhi imm7 reg, read,
30, addhi imm7 reg, exec, op0s[mdr], regr1s[tgt2], op1s[regr1], regws[tgt2], ALU[addhi], reg_load
31, push reg, decode, decr_sp,
31, push reg, read, regr0s[SP], op0s[regr0], op1s[regr1], mar_load
31, push reg, exec, mdrs[alu], regr0s[tgt], regr1s[reg0], op0s[regr0], op1s[regr1], mdr_load, ram_load
32, pop reg, decode,
32, pop reg, read, regr0s[SP], op0s[regr0], op1s[regr1], mar_load
32, pop reg, exec, regr1s[reg0], op0s[mdr], regws[tgt], mdrs[ram], mdr_load, reg_load, incr_sp
33, br.r reg, decode, regr0s[tgt], regr1s[reg0], regws[pc], op0s[regr0], op1s[regr1], reg_load, skipstate[2]
33, br.r reg, read,
33, br.r reg, exec,
34, syscall src, decode,
34, syscall src, read,
34, syscall src, exec,
35, reti, decode, reti, skipstate[2]
35, reti, read,
35, reti, exec,
36,
37, brk, decode, brk
37, brk, read,
37, brk, exec, brk
38, lcr tgt, decode, regr0s[cr], op0s[regr0], op1s[regr1], regws[tgt], reg_load, skipstate[2]
38, lcr tgt, read
38, lcr tgt, exec
39, scr src, decode, regr0s[arg0], op0s[regr0], op1s[regr1], regws[cr], reg_load, skipstate[2]
39, src sec, read
39, src sec, exec
40, wpte src tgt, decode, regr0s[arg0], regr1s[arg1], op0s[regr0], op1s[regr1], wpte, skipstate[2]
40, wpte src tgt, read,
40, wpte src tgt, exec,
41, lpte src tgt, decode, regr0s[arg0], op0s[regr0], op1s[regr1], MDRS[alu], mdr_load
41, lpte src tgt, read,
41, lpte src tgt, exec, op1s[pte], op0s[regr0], regws[tgt], reg_load
42, wptb src, decode, regr0s[arg0], op0s[regr0], wptb, skipstate[2]
42, wptb src, read
42, wptb src, exec
43, lptb tgt, decode, op0s[ptb], regws[tgt], op1s[regr1], reg_load, skipstate[2]
43, lptb tgt, read,
43, lptb tgt, exec,